// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QOTD.Backend.Models;

#nullable disable

namespace QOTD.Backend.Migrations
{
    [DbContext(typeof(AppdbContext))]
    partial class AppdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QOTD.Backend.Models.AnswerKey", b =>
                {
                    b.Property<int>("AnswerKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerKeyId"));

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerKeyId");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerKey");
                });

            modelBuilder.Entity("QOTD.Backend.Models.AnswerOption", b =>
                {
                    b.Property<int>("AnswerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerOptionId"));

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOption");
                });

            modelBuilder.Entity("QOTD.Backend.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Fun"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Math"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Func"
                        });
                });

            modelBuilder.Entity("QOTD.Backend.Models.Questions", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMultipleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("QuestionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SnapShot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("QOTD.Backend.Models.ReputationMaster", b =>
                {
                    b.Property<int>("ReputationMasterId")
                        .HasColumnType("int");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinPoints")
                        .HasColumnType("int");

                    b.Property<int>("UptoPoints")
                        .HasColumnType("int");

                    b.HasKey("ReputationMasterId");

                    b.ToTable("ReputationMaster");

                    b.HasData(
                        new
                        {
                            ReputationMasterId = 1,
                            Badge = "Novice",
                            MinPoints = 0,
                            UptoPoints = 49
                        },
                        new
                        {
                            ReputationMasterId = 2,
                            Badge = "Learner",
                            MinPoints = 50,
                            UptoPoints = 99
                        },
                        new
                        {
                            ReputationMasterId = 3,
                            Badge = "Apprentice",
                            MinPoints = 100,
                            UptoPoints = 199
                        },
                        new
                        {
                            ReputationMasterId = 4,
                            Badge = "Explorer",
                            MinPoints = 200,
                            UptoPoints = 349
                        },
                        new
                        {
                            ReputationMasterId = 5,
                            Badge = "Adept",
                            MinPoints = 350,
                            UptoPoints = 499
                        },
                        new
                        {
                            ReputationMasterId = 6,
                            Badge = "Skilled",
                            MinPoints = 500,
                            UptoPoints = 749
                        },
                        new
                        {
                            ReputationMasterId = 7,
                            Badge = "Expert",
                            MinPoints = 750,
                            UptoPoints = 999
                        },
                        new
                        {
                            ReputationMasterId = 8,
                            Badge = "Master",
                            MinPoints = 1000,
                            UptoPoints = 1449
                        },
                        new
                        {
                            ReputationMasterId = 9,
                            Badge = "Veteran",
                            MinPoints = 1500,
                            UptoPoints = 1999
                        },
                        new
                        {
                            ReputationMasterId = 10,
                            Badge = "Hero",
                            MinPoints = 2000,
                            UptoPoints = 2999
                        },
                        new
                        {
                            ReputationMasterId = 11,
                            Badge = "Champion",
                            MinPoints = 3000,
                            UptoPoints = 4999
                        },
                        new
                        {
                            ReputationMasterId = 12,
                            Badge = "Centurion",
                            MinPoints = 4500,
                            UptoPoints = 5999
                        },
                        new
                        {
                            ReputationMasterId = 13,
                            Badge = "Guardian",
                            MinPoints = 6000,
                            UptoPoints = 7999
                        },
                        new
                        {
                            ReputationMasterId = 14,
                            Badge = "Sentinel",
                            MinPoints = 8000,
                            UptoPoints = 9999
                        },
                        new
                        {
                            ReputationMasterId = 15,
                            Badge = "Commander",
                            MinPoints = 10000,
                            UptoPoints = 12499
                        },
                        new
                        {
                            ReputationMasterId = 16,
                            Badge = "Legend",
                            MinPoints = 12500,
                            UptoPoints = 14999
                        },
                        new
                        {
                            ReputationMasterId = 17,
                            Badge = "Sage",
                            MinPoints = 15000,
                            UptoPoints = 19999
                        },
                        new
                        {
                            ReputationMasterId = 18,
                            Badge = "Archon",
                            MinPoints = 20000,
                            UptoPoints = 24999
                        },
                        new
                        {
                            ReputationMasterId = 19,
                            Badge = "Paladin",
                            MinPoints = 25000,
                            UptoPoints = 29999
                        },
                        new
                        {
                            ReputationMasterId = 20,
                            Badge = "Grandmaster",
                            MinPoints = 30000,
                            UptoPoints = 39999
                        },
                        new
                        {
                            ReputationMasterId = 21,
                            Badge = "Overlord",
                            MinPoints = 40000,
                            UptoPoints = 49999
                        },
                        new
                        {
                            ReputationMasterId = 22,
                            Badge = "Oracle",
                            MinPoints = 50000,
                            UptoPoints = 100000
                        });
                });

            modelBuilder.Entity("QOTD.Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedON")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedON")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("QOTD.Backend.Models.UserResponse", b =>
                {
                    b.Property<int>("UserResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserResponseId"));

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserResponseId");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserResponse");
                });

            modelBuilder.Entity("QOTD.Backend.Models.AnswerKey", b =>
                {
                    b.HasOne("QOTD.Backend.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QOTD.Backend.Models.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QOTD.Backend.Models.AnswerOption", b =>
                {
                    b.HasOne("QOTD.Backend.Models.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QOTD.Backend.Models.Questions", b =>
                {
                    b.HasOne("QOTD.Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QOTD.Backend.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QOTD.Backend.Models.UserResponse", b =>
                {
                    b.HasOne("QOTD.Backend.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QOTD.Backend.Models.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QOTD.Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Questions");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
